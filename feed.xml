<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title></title><description>Web, tools, technology, astronomy and more!</description><link>http://blarg.co.uk<atom:link href="http://blarg.co.uk/feed.xml" rel="self" type="application/rss+xml"><item><title>Comparison of JPEG Lossless Compression Tools</title><description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Lossless_compression&quot;&gt;Losslessly compressing&lt;/a&gt; JPEG files is a great but often overlooked way to reduce file sizes on your website or application without losing image quality. Smaller file sizes mean less bandwidth usage for you, and faster page load speeds for your users. What’s not to like about that?&lt;/p&gt; &lt;p&gt;So you want to losslessly compress all your lovely JPEGs but what tool should you use to get the maximum benefit? In this article I compare four tools (jpegoptim, jpegtran, jpegrescan and mozjpeg) and use them to losslessly compress a few different JPEG files to see which gives the best reduction in file size.&lt;/p&gt;</description><pubdate>Fri, 27 Jun 2014 00:00:00 +0100</pubdate><link>http://blarg.co.uk/blog/comparison-of-jpeg-lossless-compression-tools<guid ispermalink="true">http://blarg.co.uk/blog/comparison-of-jpeg-lossless-compression-tools</guid></item><item><title>How to Install mozjpeg</title><description>&lt;p&gt;About a month ago Mozilla &lt;a href=&quot;https://blog.mozilla.org/research/2014/03/05/introducing-the-mozjpeg-project/&quot;&gt;announced their ‘mozjpeg’&lt;/a&gt; project with the aim of improving &lt;a href=&quot;http://en.wikipedia.org/wiki/Lossless_compression&quot;&gt;lossless&lt;/a&gt; jpeg compression and making the web a faster place. Forked from &lt;a href=&quot;http://libjpeg-turbo.virtualgl.org/&quot;&gt;libjpeg-turbo&lt;/a&gt;, mozjpeg is more concerned with reducing filesize than doing it quickly. It uses the same compression process written in a perl script by Loren Merritt called &lt;code&gt;jpegcrush&lt;/code&gt; and claims to be able to reduce jpeg size by 10% on average.&lt;/p&gt; &lt;p&gt;So, it sounds pretty good and you want to save some bandwidth and give mozjpeg a go. With a lack of an auto-install option using a repository like APT you will need to build it from source which sounds complicated but is actually pretty easy as I show.&lt;/p&gt;</description><pubdate>Thu, 03 Apr 2014 00:00:00 +0100</pubdate><link>http://blarg.co.uk/blog/how-to-install-mozjpeg<guid ispermalink="true">http://blarg.co.uk/blog/how-to-install-mozjpeg</guid></item><item><title>Recursively Optimize PNG Files</title><description>&lt;p&gt;One way to improve performance and reduce bandwidth for your website is to make sure your image files are properly optimised. It’s an easy win for not much work so there’s no excuse for not doing it - especially when it can all be done losslessly with the end result will looking exactly the same as the original with no loss of quality.&lt;/p&gt; &lt;p&gt;If you are looking at doing this for the first time you probably have a great big folder of images which also contains sub-folders and sub-sub-folders of even more images and will want to optimize them all. In this article I look at using OptiPNG and PNGCrush, two of the most commonly used png optimizers, and see how you can use them to quickly optimize all of the images recursively in a directory.&lt;/p&gt;</description><pubdate>Fri, 28 Mar 2014 00:00:00 +0000</pubdate><link>http://blarg.co.uk/blog/recursively-optimize-png-files<guid ispermalink="true">http://blarg.co.uk/blog/recursively-optimize-png-files</guid></item><item><title>Javascript Date Formats</title><description>&lt;p&gt; A recent project I was working on required me to build a custom dynamic calendar in Javascript using a dataset from MySQL. All was working fine as I built it using my browser of choice, &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Google Chrome&lt;/a&gt;, but once it came to testing in other browsers everything came crashing down as soon as I tried it using Internet Explorer. The problem I had run into was creating my Date objects directly using the MySQL date format of YYYY-mm-dd in the following way: &lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2014-02-10&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt; After a bit of testing I discovered that all modern browsers can accept and parse this date format but IE9 and below don&#39;t understand it and return an Invalid Date. This got me wondering what date formats do different browsers understand and which ones are valid in all browsers so I wrote a script to test Date objects created using different combinations of date strings and these are the results. &lt;/p&gt;</description><pubdate>Fri, 14 Mar 2014 00:00:00 +0000</pubdate><link>http://blarg.co.uk/blog/javascript-date-formats<guid ispermalink="true">http://blarg.co.uk/blog/javascript-date-formats</guid></item><item><title>Automatically Collapse FirePHP Responses</title><description>&lt;p&gt;&lt;a href=&quot;http://www.firephp.org/&quot;&gt;FirePHP&lt;/a&gt; is a Firefox extension that allows you to log directly to the &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; console from PHP. This is great for AJAX applications because you can debug your server side scripts without interferring with the responses.&lt;/p&gt; &lt;p&gt;Each script that returns a FirePHP log will generate it’s own group in the Firebug console which is expanded by default which means if you are logging a lot of data on the server side (such as database queries) then there will be a lot of data displayed in the console which you may not want to see all the time.&lt;/p&gt; &lt;p&gt;My solution to this was to edit the FirePHP extension so that each script response is collapsed automatically. You can then click a response to expand it if you want to view more details.&lt;/p&gt;</description><pubdate>Wed, 03 Nov 2010 00:00:00 +0000</pubdate><link>http://blarg.co.uk/blog/automatically-collapse-firephp-responses<guid ispermalink="true">http://blarg.co.uk/blog/automatically-collapse-firephp-responses</guid></item><item><title>Alternative DATEDIFF for MySQL</title><description>&lt;p&gt;The &lt;code&gt;DATEDIFF()&lt;/code&gt; function was added in MySQL version 4.1.1. For earlier versions that do not support this function you can make a work-around for it using the &lt;code&gt;TO_DAYS&lt;/code&gt; function. This article show you how to do just that.&lt;/p&gt; &lt;p&gt;The following code shows how to perform the equivalent of &lt;code&gt;DATEDIFF()&lt;/code&gt; when it is not available:&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot; data-lang=&quot;mysql&quot;&gt;SELECT TO_DAYS(date1) - TO_DAYS(date2); -- example SELECT TO_DAYS(&#39;2010-01-03&#39;) - TO_DAYS(&#39;2010-01-01&#39;); -- returns &#39;2&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;This will give the same effect as &lt;code&gt;DATEDIFF(date1, date2)&lt;/code&gt; by converting each date to the number of days since year 0 and subtracting them.&lt;/p&gt; &lt;p&gt;&lt;span class=&quot;label label-success&quot;&gt;Note:&lt;/span&gt; According the &lt;a href=&quot;http://dev.mysql.com/doc/refman/4.1/en/date-and-time-functions.html#function_to-days&quot;&gt;MySQL manual&lt;/a&gt;, &lt;code&gt;TO_DAYS()&lt;/code&gt; is not intended for use with dates that precede the year 1582 because it does not take into account the days that were lost when the Gregorian calendar was introduced so using this method is not advisable for dates earlier than this.&lt;/p&gt;</description><pubdate>Tue, 26 Oct 2010 00:00:00 +0100</pubdate><link>http://blarg.co.uk/blog/alternative-datediff-for-mysql<guid ispermalink="true">http://blarg.co.uk/blog/alternative-datediff-for-mysql</guid></item></atom:link></channel></rss>